apply plugin: 'groovy'
apply plugin: 'eclipse'

group = 'bluevis'

defaultTasks 'jar'

configurations {
    compile.visible = true
    compile.exclude module: 'netty'
    compile.exclude module: 'linked-data-sail'
}


repositories {

    mavenCentral()
    mavenRepo urls: ["http://tinkerpop.com/maven2"]

}


dependencies {
    groovy localGroovy()
    testCompile localGroovy()

    compile "junit:junit:4.8.2"
    compile fileTree(dir: 'lib', include: '*.jar')
    compile 'com.tinkerpop.gremlin:gremlin:1.4'
    compile 'com.tinkerpop.gremlin:gremlin-groovy:1.4'
}

task cleansnapshots << {
    println "Cleaning snapshots"
    def snapshotsDir = new File("${snapshots}/com.turf")
    println snapshotsDir
    snapshotsDir.deleteDir()
}

orderEntryType = 'module-library'
gradleLibraryId = 'Gradle Libraries'

task idea << {

    // change this to the name of your module file
    def moduleFileName = "bluevis.iml"
    def root = new XmlParser().parse(moduleFileName)
    def newModuleRootManager = root.component.find {it.'@name' == 'NewModuleRootManager'}

    // if there is aready a module library in place we should remove it
    removeOldOrderEntry(newModuleRootManager)

    // add the new module library with our current gradle dependencies
    addNewOrderEntry(newModuleRootManager)

    // output the .iml XML
    def writer = new StringWriter()
    new XmlNodePrinter(new PrintWriter(writer)).print(root)
    def result = writer.toString()
    print result

    // overwrite our old .iml file
    def moduleFile = new File(moduleFileName)
    moduleFile.text = result
}

private def addNewOrderEntry(newModuleRootManager) {
    def newOrderEntry = newModuleRootManager.appendNode('orderEntry', [type: orderEntryType])
    def newGradleLibrary = newOrderEntry.appendNode('library', [name: gradleLibraryId])
    def classesNode = newGradleLibrary.appendNode('CLASSES')

    def path = configurations.compile.asPath
    def jars = path.split(':')
    jars = Arrays.asList(jars)

    jars.each { jar ->

        classesNode.appendNode('root', [url: "jar://$jar!/"])
    }
}

private def removeOldOrderEntry(newModuleRootManager) {
    def oldOrderEntry = newModuleRootManager.orderEntry.find {
        (it.'@type' == orderEntryType) && (it.library[0].'@name' == gradleLibraryId)
    }
    if (oldOrderEntry) {
        newModuleRootManager.remove(oldOrderEntry)
    }
}
